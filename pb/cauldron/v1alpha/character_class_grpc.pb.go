// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package cauldron

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CharacterClassServiceClient is the client API for CharacterClassService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CharacterClassServiceClient interface {
	CreateCharacterClass(ctx context.Context, in *CreateCharacterClassRequest, opts ...grpc.CallOption) (*CreateCharacterClassResponse, error)
	GetCharacterClassByID(ctx context.Context, in *GetCharacterClassByIDRequest, opts ...grpc.CallOption) (*GetCharacterClassByIDResponse, error)
}

type characterClassServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCharacterClassServiceClient(cc grpc.ClientConnInterface) CharacterClassServiceClient {
	return &characterClassServiceClient{cc}
}

func (c *characterClassServiceClient) CreateCharacterClass(ctx context.Context, in *CreateCharacterClassRequest, opts ...grpc.CallOption) (*CreateCharacterClassResponse, error) {
	out := new(CreateCharacterClassResponse)
	err := c.cc.Invoke(ctx, "/nicklaw5.cauldron.v1alpha.CharacterClassService/CreateCharacterClass", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *characterClassServiceClient) GetCharacterClassByID(ctx context.Context, in *GetCharacterClassByIDRequest, opts ...grpc.CallOption) (*GetCharacterClassByIDResponse, error) {
	out := new(GetCharacterClassByIDResponse)
	err := c.cc.Invoke(ctx, "/nicklaw5.cauldron.v1alpha.CharacterClassService/GetCharacterClassByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CharacterClassServiceServer is the server API for CharacterClassService service.
// All implementations must embed UnimplementedCharacterClassServiceServer
// for forward compatibility
type CharacterClassServiceServer interface {
	CreateCharacterClass(context.Context, *CreateCharacterClassRequest) (*CreateCharacterClassResponse, error)
	GetCharacterClassByID(context.Context, *GetCharacterClassByIDRequest) (*GetCharacterClassByIDResponse, error)
	mustEmbedUnimplementedCharacterClassServiceServer()
}

// UnimplementedCharacterClassServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCharacterClassServiceServer struct {
}

func (UnimplementedCharacterClassServiceServer) CreateCharacterClass(context.Context, *CreateCharacterClassRequest) (*CreateCharacterClassResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCharacterClass not implemented")
}
func (UnimplementedCharacterClassServiceServer) GetCharacterClassByID(context.Context, *GetCharacterClassByIDRequest) (*GetCharacterClassByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCharacterClassByID not implemented")
}
func (UnimplementedCharacterClassServiceServer) mustEmbedUnimplementedCharacterClassServiceServer() {}

// UnsafeCharacterClassServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CharacterClassServiceServer will
// result in compilation errors.
type UnsafeCharacterClassServiceServer interface {
	mustEmbedUnimplementedCharacterClassServiceServer()
}

func RegisterCharacterClassServiceServer(s grpc.ServiceRegistrar, srv CharacterClassServiceServer) {
	s.RegisterService(&CharacterClassService_ServiceDesc, srv)
}

func _CharacterClassService_CreateCharacterClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCharacterClassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CharacterClassServiceServer).CreateCharacterClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nicklaw5.cauldron.v1alpha.CharacterClassService/CreateCharacterClass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CharacterClassServiceServer).CreateCharacterClass(ctx, req.(*CreateCharacterClassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CharacterClassService_GetCharacterClassByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCharacterClassByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CharacterClassServiceServer).GetCharacterClassByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nicklaw5.cauldron.v1alpha.CharacterClassService/GetCharacterClassByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CharacterClassServiceServer).GetCharacterClassByID(ctx, req.(*GetCharacterClassByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CharacterClassService_ServiceDesc is the grpc.ServiceDesc for CharacterClassService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CharacterClassService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nicklaw5.cauldron.v1alpha.CharacterClassService",
	HandlerType: (*CharacterClassServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCharacterClass",
			Handler:    _CharacterClassService_CreateCharacterClass_Handler,
		},
		{
			MethodName: "GetCharacterClassByID",
			Handler:    _CharacterClassService_GetCharacterClassByID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cauldron/v1alpha/character_class.proto",
}
