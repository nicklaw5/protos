// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package cauldron

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ItemServiceClient is the client API for ItemService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ItemServiceClient interface {
	GetItemByID(ctx context.Context, in *GetItemByIdRequest, opts ...grpc.CallOption) (*GetItemByIdResponse, error)
	NewItem(ctx context.Context, in *NewItemRequest, opts ...grpc.CallOption) (*NewItemResponse, error)
}

type itemServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewItemServiceClient(cc grpc.ClientConnInterface) ItemServiceClient {
	return &itemServiceClient{cc}
}

func (c *itemServiceClient) GetItemByID(ctx context.Context, in *GetItemByIdRequest, opts ...grpc.CallOption) (*GetItemByIdResponse, error) {
	out := new(GetItemByIdResponse)
	err := c.cc.Invoke(ctx, "/nicklaw5.cauldron.v1alpha.ItemService/GetItemByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemServiceClient) NewItem(ctx context.Context, in *NewItemRequest, opts ...grpc.CallOption) (*NewItemResponse, error) {
	out := new(NewItemResponse)
	err := c.cc.Invoke(ctx, "/nicklaw5.cauldron.v1alpha.ItemService/NewItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ItemServiceServer is the server API for ItemService service.
// All implementations must embed UnimplementedItemServiceServer
// for forward compatibility
type ItemServiceServer interface {
	GetItemByID(context.Context, *GetItemByIdRequest) (*GetItemByIdResponse, error)
	NewItem(context.Context, *NewItemRequest) (*NewItemResponse, error)
	mustEmbedUnimplementedItemServiceServer()
}

// UnimplementedItemServiceServer must be embedded to have forward compatible implementations.
type UnimplementedItemServiceServer struct {
}

func (UnimplementedItemServiceServer) GetItemByID(context.Context, *GetItemByIdRequest) (*GetItemByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetItemByID not implemented")
}
func (UnimplementedItemServiceServer) NewItem(context.Context, *NewItemRequest) (*NewItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewItem not implemented")
}
func (UnimplementedItemServiceServer) mustEmbedUnimplementedItemServiceServer() {}

// UnsafeItemServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ItemServiceServer will
// result in compilation errors.
type UnsafeItemServiceServer interface {
	mustEmbedUnimplementedItemServiceServer()
}

func RegisterItemServiceServer(s grpc.ServiceRegistrar, srv ItemServiceServer) {
	s.RegisterService(&ItemService_ServiceDesc, srv)
}

func _ItemService_GetItemByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetItemByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemServiceServer).GetItemByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nicklaw5.cauldron.v1alpha.ItemService/GetItemByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemServiceServer).GetItemByID(ctx, req.(*GetItemByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemService_NewItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemServiceServer).NewItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nicklaw5.cauldron.v1alpha.ItemService/NewItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemServiceServer).NewItem(ctx, req.(*NewItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ItemService_ServiceDesc is the grpc.ServiceDesc for ItemService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ItemService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nicklaw5.cauldron.v1alpha.ItemService",
	HandlerType: (*ItemServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetItemByID",
			Handler:    _ItemService_GetItemByID_Handler,
		},
		{
			MethodName: "NewItem",
			Handler:    _ItemService_NewItem_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cauldron/v1alpha/item_service.proto",
}
