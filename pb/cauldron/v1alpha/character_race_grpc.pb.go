// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package cauldron

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CharacterRaceServiceClient is the client API for CharacterRaceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CharacterRaceServiceClient interface {
	CreateCharacterRace(ctx context.Context, in *CreateCharacterRaceRequest, opts ...grpc.CallOption) (*CreateCharacterRaceResponse, error)
	GetCharacterRaceByID(ctx context.Context, in *GetCharacterRaceByIDRequest, opts ...grpc.CallOption) (*GetCharacterRaceByIDResponse, error)
}

type characterRaceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCharacterRaceServiceClient(cc grpc.ClientConnInterface) CharacterRaceServiceClient {
	return &characterRaceServiceClient{cc}
}

func (c *characterRaceServiceClient) CreateCharacterRace(ctx context.Context, in *CreateCharacterRaceRequest, opts ...grpc.CallOption) (*CreateCharacterRaceResponse, error) {
	out := new(CreateCharacterRaceResponse)
	err := c.cc.Invoke(ctx, "/nicklaw5.cauldron.v1alpha.CharacterRaceService/CreateCharacterRace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *characterRaceServiceClient) GetCharacterRaceByID(ctx context.Context, in *GetCharacterRaceByIDRequest, opts ...grpc.CallOption) (*GetCharacterRaceByIDResponse, error) {
	out := new(GetCharacterRaceByIDResponse)
	err := c.cc.Invoke(ctx, "/nicklaw5.cauldron.v1alpha.CharacterRaceService/GetCharacterRaceByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CharacterRaceServiceServer is the server API for CharacterRaceService service.
// All implementations must embed UnimplementedCharacterRaceServiceServer
// for forward compatibility
type CharacterRaceServiceServer interface {
	CreateCharacterRace(context.Context, *CreateCharacterRaceRequest) (*CreateCharacterRaceResponse, error)
	GetCharacterRaceByID(context.Context, *GetCharacterRaceByIDRequest) (*GetCharacterRaceByIDResponse, error)
	mustEmbedUnimplementedCharacterRaceServiceServer()
}

// UnimplementedCharacterRaceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCharacterRaceServiceServer struct {
}

func (UnimplementedCharacterRaceServiceServer) CreateCharacterRace(context.Context, *CreateCharacterRaceRequest) (*CreateCharacterRaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCharacterRace not implemented")
}
func (UnimplementedCharacterRaceServiceServer) GetCharacterRaceByID(context.Context, *GetCharacterRaceByIDRequest) (*GetCharacterRaceByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCharacterRaceByID not implemented")
}
func (UnimplementedCharacterRaceServiceServer) mustEmbedUnimplementedCharacterRaceServiceServer() {}

// UnsafeCharacterRaceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CharacterRaceServiceServer will
// result in compilation errors.
type UnsafeCharacterRaceServiceServer interface {
	mustEmbedUnimplementedCharacterRaceServiceServer()
}

func RegisterCharacterRaceServiceServer(s grpc.ServiceRegistrar, srv CharacterRaceServiceServer) {
	s.RegisterService(&CharacterRaceService_ServiceDesc, srv)
}

func _CharacterRaceService_CreateCharacterRace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCharacterRaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CharacterRaceServiceServer).CreateCharacterRace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nicklaw5.cauldron.v1alpha.CharacterRaceService/CreateCharacterRace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CharacterRaceServiceServer).CreateCharacterRace(ctx, req.(*CreateCharacterRaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CharacterRaceService_GetCharacterRaceByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCharacterRaceByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CharacterRaceServiceServer).GetCharacterRaceByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nicklaw5.cauldron.v1alpha.CharacterRaceService/GetCharacterRaceByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CharacterRaceServiceServer).GetCharacterRaceByID(ctx, req.(*GetCharacterRaceByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CharacterRaceService_ServiceDesc is the grpc.ServiceDesc for CharacterRaceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CharacterRaceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nicklaw5.cauldron.v1alpha.CharacterRaceService",
	HandlerType: (*CharacterRaceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCharacterRace",
			Handler:    _CharacterRaceService_CreateCharacterRace_Handler,
		},
		{
			MethodName: "GetCharacterRaceByID",
			Handler:    _CharacterRaceService_GetCharacterRaceByID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cauldron/v1alpha/character_race.proto",
}
